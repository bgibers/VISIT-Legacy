/**
 * My Title
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable, BehaviorSubject } from 'rxjs';

import { Location } from '../model/location';
import { UserLocation } from '../model/userLocation';

import { COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';
import { Storage } from '@ionic/storage';
import { BASE_PATH } from '../../../../environments/environment';

@Injectable()
export class LocationService {

    protected basePath = BASE_PATH;
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string,
                @Optional() configuration: Configuration, storage: Storage) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }

        this.defaultHeaders.set('Authoriztion', `Bearer ${storage.get('ACCESS_TOKEN')}`);
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get location by ID
     *
     * @param locationCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public locationGetLocation(locationCode: string, observe?: 'body', reportProgress?: boolean): Observable<Location>;
    public locationGetLocation(locationCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Location>>;
    public locationGetLocation(locationCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Location>>;
    public locationGetLocation(locationCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (locationCode === null || locationCode === undefined) {
            throw new Error('Required parameter locationCode was null or undefined when calling locationGetLocation.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Location>(`${this.basePath}/Location/Code/${encodeURIComponent(String(locationCode))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers,
                observe,
                reportProgress
            }
        );
    }

    /**
     * Get location by Name
     *
     * @param name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public locationGetLocationByName(name: string, observe?: 'body', reportProgress?: boolean): Observable<Location>;
    public locationGetLocationByName(name: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Location>>;
    public locationGetLocationByName(name: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Location>>;
    public locationGetLocationByName(name: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling locationGetLocationByName.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Location>(`${this.basePath}/Location/Name/${encodeURIComponent(String(name))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers,
                observe,
                reportProgress
            }
        );
    }

    /**
     * Get locations by UserId
     *
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public locationGetLocationsByUserId(id: string, observe?: 'body', reportProgress?: boolean): Observable<Array<UserLocation>>;
    public locationGetLocationsByUserId(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<UserLocation>>>;
    public locationGetLocationsByUserId(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<UserLocation>>>;
    public locationGetLocationsByUserId(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling locationGetLocationsByUserId.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<UserLocation>>(`${this.basePath}/Location/User/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers,
                observe,
                reportProgress
            }
        );
    }

    public async getLocationForUser(userId: string): Promise<BehaviorSubject<UserLocation[]>> {
        const userLocations: BehaviorSubject<UserLocation[]> = new BehaviorSubject([]);
        this.locationGetLocationsByUserId(userId).subscribe(
            (result: UserLocation[]) => {
                userLocations.next(result);
              });
        return userLocations;
    }


    /**
     * Get locations by Username
     *
     * @param name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public locationGetLocationsByUserName(name: string, observe?: 'body', reportProgress?: boolean): Observable<Array<UserLocation>>;
    public locationGetLocationsByUserName(name: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<UserLocation>>>;
    public locationGetLocationsByUserName(name: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<UserLocation>>>;
    public locationGetLocationsByUserName(name: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling locationGetLocationsByUserName.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<UserLocation>>(`${this.basePath}/Location/Username/${encodeURIComponent(String(name))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers,
                observe,
                reportProgress
            }
        );
    }

    /**
     * Post countries to the DB
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public locationPostCountries(observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public locationPostCountries(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public locationPostCountries(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public locationPostCountries(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post(`${this.basePath}/Location/load`,
            null,
            {
                responseType: 'blob',
                withCredentials: this.configuration.withCredentials,
                headers,
                observe,
                reportProgress
            }
        );
    }

}
